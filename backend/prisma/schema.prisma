// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // ⚠️ Prisma CLI(migrate/studio)는 여기 env("DB_URL")를 꼭 필요로 합니다.
  // 앱 런타임에서 DB_URL을 코드로 조합하더라도,
  // 마이그레이션을 위해 .env.dev / .env.prod 에 DB_URL은 남겨두세요.
  url      = env("DB_URL")
}

// Enum
enum UserRole {
  USER
  COMPANY
  ADMIN
}

enum Location {
  산업현장
  건설현장
  도심빌딩
  무인매장
}

enum Sequence {
  사고
  도난
  쓰러짐
}

enum Camera {
  RGB
  IR
  Depth
}

enum Height {
  THREE_M          @map("3m")
  THREE_TO_FIVE_M  @map("3m~5m")
  OVER_FIVE_M      @map("5m 초과")
}

enum Angle {
  DEG_30  @map("30")
  DEG_45  @map("45")
  DEG_90  @map("90")
}

enum FOV {
  Ultrawide
  Wide
  Linear
}

enum Category {
  CATEGORY1 @map("카테고리1")
  CATEGORY2 @map("카테고리2")
  CATEGORY3 @map("카테고리3")
}

enum Definition {
  FOUR_K  @map("4K")
  HD      @map("HD")       
  FULL_HD @map("Full HD") 
}


// Model
model User {
  id           Int       @id @default(autoincrement())            // PK
  user_id      String    @unique @db.VarChar(50)                   // 비즈니스용 ID(로그인 ID 등)
  user_name    String    @db.VarChar(100)
  user_email   String    @unique @db.VarChar(255)
  user_password String   @db.VarChar(255)                          // 해시 저장 권장(BCrypt 등)
  user_role      UserRole  @default(USER)
  image_count   Int      @default(0)
  created_at   DateTime  @default(now())
  update_at    DateTime  @updatedAt

  // Relation
  tokens       UserToken[]
  logs         Logs[]
  userSetting  UserSetting?

  @@map("tb_user")
  @@index([user_email])
  @@index([user_id])
}

model UserToken {
  id          Int       @id @default(autoincrement())
  jti         String    @unique @db.VarChar(128)                   // JWT ID 등
  token_hash  String    @db.VarChar(255)                           // 토큰 해시(원문 저장 금지)
  user_id     Int
  revoked     Boolean   @default(false)
  user_agent  String?   @db.VarChar(255)
  ip          String?   @db.VarChar(45)                            // IPv4/IPv6
  expires_at  DateTime
  last_used_at DateTime? @default(now())
  created_at  DateTime  @default(now())

  // FK
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tb_user_token")
  @@index([user_id])
}

model Logs {
  id          Int       @id @default(autoincrement())
  user_id     Int?      
  user_name   String    @db.VarChar(100) 
  location    Location
  sequence    Sequence
  camera      Camera
  height      Height
  angle       Angle
  fov         FOV      
  upload_title  String  @default("Untitled image") @db.VarChar(255)
  create_title  String  @default("Untitled video") @db.VarChar(255)
  upload_url  String    @db.VarChar(255) 
  create_url  String    @db.VarChar(255)
  created_at  DateTime  @default(now())

  // FK
  user        User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("tb_logs")
  @@index([user_id])
}

model Sample {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String    @db.VarChar(255)
  sample_url  String    @db.VarChar(255)
  time        Int       @default(0)
  category    Category?        
  price       Int       @default(0)
  definition  Definition?     

  @@map("tb_sample")
}

model UserSetting {
  id          Int       @id @default(autoincrement())
  user_id     Int       @unique
  location    Location
  sequence    Sequence
  camera      Camera
  height      Height
  angle       Angle
  fov         FOV      
  created_at  DateTime  @default(now())

  // FK
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("tb_user_setting")
  @@index([user_id])
}